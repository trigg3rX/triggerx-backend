// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_execution.go -package=execution
//

// Package execution is a generated GoMock package.
package execution

import (
	context "context"
	reflect "reflect"

	types "github.com/trigg3rX/triggerx-backend/pkg/docker/types"
	gomock "go.uber.org/mock/gomock"
)

// MockExecutionAPI is a mock of ExecutionAPI interface.
type MockExecutionAPI struct {
	ctrl     *gomock.Controller
	recorder *MockExecutionAPIMockRecorder
	isgomock struct{}
}

// MockExecutionAPIMockRecorder is the mock recorder for MockExecutionAPI.
type MockExecutionAPIMockRecorder struct {
	mock *MockExecutionAPI
}

// NewMockExecutionAPI creates a new mock instance.
func NewMockExecutionAPI(ctrl *gomock.Controller) *MockExecutionAPI {
	mock := &MockExecutionAPI{ctrl: ctrl}
	mock.recorder = &MockExecutionAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockExecutionAPI) EXPECT() *MockExecutionAPIMockRecorder {
	return m.recorder
}

// CancelExecution mocks base method.
func (m *MockExecutionAPI) CancelExecution(executionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelExecution", executionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelExecution indicates an expected call of CancelExecution.
func (mr *MockExecutionAPIMockRecorder) CancelExecution(executionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelExecution", reflect.TypeOf((*MockExecutionAPI)(nil).CancelExecution), executionID)
}

// ClearAlerts mocks base method.
func (m *MockExecutionAPI) ClearAlerts() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAlerts")
}

// ClearAlerts indicates an expected call of ClearAlerts.
func (mr *MockExecutionAPIMockRecorder) ClearAlerts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAlerts", reflect.TypeOf((*MockExecutionAPI)(nil).ClearAlerts))
}

// Close mocks base method.
func (m *MockExecutionAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockExecutionAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockExecutionAPI)(nil).Close))
}

// Execute mocks base method.
func (m *MockExecutionAPI) Execute(ctx context.Context, fileURL, fileLanguage string, noOfAttesters int) (*types.ExecutionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, fileURL, fileLanguage, noOfAttesters)
	ret0, _ := ret[0].(*types.ExecutionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockExecutionAPIMockRecorder) Execute(ctx, fileURL, fileLanguage, noOfAttesters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockExecutionAPI)(nil).Execute), ctx, fileURL, fileLanguage, noOfAttesters)
}

// GetActiveExecutions mocks base method.
func (m *MockExecutionAPI) GetActiveExecutions() []*types.ExecutionContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveExecutions")
	ret0, _ := ret[0].([]*types.ExecutionContext)
	return ret0
}

// GetActiveExecutions indicates an expected call of GetActiveExecutions.
func (mr *MockExecutionAPIMockRecorder) GetActiveExecutions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveExecutions", reflect.TypeOf((*MockExecutionAPI)(nil).GetActiveExecutions))
}

// GetAlerts mocks base method.
func (m *MockExecutionAPI) GetAlerts(severity string, limit int) []Alert {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlerts", severity, limit)
	ret0, _ := ret[0].([]Alert)
	return ret0
}

// GetAlerts indicates an expected call of GetAlerts.
func (mr *MockExecutionAPIMockRecorder) GetAlerts(severity, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlerts", reflect.TypeOf((*MockExecutionAPI)(nil).GetAlerts), severity, limit)
}

// GetExecutionByID mocks base method.
func (m *MockExecutionAPI) GetExecutionByID(executionID string) (*types.ExecutionContext, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetExecutionByID", executionID)
	ret0, _ := ret[0].(*types.ExecutionContext)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetExecutionByID indicates an expected call of GetExecutionByID.
func (mr *MockExecutionAPIMockRecorder) GetExecutionByID(executionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetExecutionByID", reflect.TypeOf((*MockExecutionAPI)(nil).GetExecutionByID), executionID)
}

// GetHealthStatus mocks base method.
func (m *MockExecutionAPI) GetHealthStatus() *HealthStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthStatus")
	ret0, _ := ret[0].(*HealthStatus)
	return ret0
}

// GetHealthStatus indicates an expected call of GetHealthStatus.
func (mr *MockExecutionAPIMockRecorder) GetHealthStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthStatus", reflect.TypeOf((*MockExecutionAPI)(nil).GetHealthStatus))
}

// GetPoolStats mocks base method.
func (m *MockExecutionAPI) GetPoolStats() map[types.Language]*types.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolStats")
	ret0, _ := ret[0].(map[types.Language]*types.PoolStats)
	return ret0
}

// GetPoolStats indicates an expected call of GetPoolStats.
func (mr *MockExecutionAPIMockRecorder) GetPoolStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolStats", reflect.TypeOf((*MockExecutionAPI)(nil).GetPoolStats))
}

// GetStats mocks base method.
func (m *MockExecutionAPI) GetStats() *types.PerformanceMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(*types.PerformanceMetrics)
	return ret0
}

// GetStats indicates an expected call of GetStats.
func (mr *MockExecutionAPIMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockExecutionAPI)(nil).GetStats))
}

// GetSupportedLanguages mocks base method.
func (m *MockExecutionAPI) GetSupportedLanguages() []types.Language {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedLanguages")
	ret0, _ := ret[0].([]types.Language)
	return ret0
}

// GetSupportedLanguages indicates an expected call of GetSupportedLanguages.
func (mr *MockExecutionAPIMockRecorder) GetSupportedLanguages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedLanguages", reflect.TypeOf((*MockExecutionAPI)(nil).GetSupportedLanguages))
}

// InitializeLanguagePools mocks base method.
func (m *MockExecutionAPI) InitializeLanguagePools(ctx context.Context, languages []types.Language) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeLanguagePools", ctx, languages)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeLanguagePools indicates an expected call of InitializeLanguagePools.
func (mr *MockExecutionAPIMockRecorder) InitializeLanguagePools(ctx, languages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeLanguagePools", reflect.TypeOf((*MockExecutionAPI)(nil).InitializeLanguagePools), ctx, languages)
}

// IsLanguageSupported mocks base method.
func (m *MockExecutionAPI) IsLanguageSupported(language types.Language) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLanguageSupported", language)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLanguageSupported indicates an expected call of IsLanguageSupported.
func (mr *MockExecutionAPIMockRecorder) IsLanguageSupported(language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLanguageSupported", reflect.TypeOf((*MockExecutionAPI)(nil).IsLanguageSupported), language)
}
