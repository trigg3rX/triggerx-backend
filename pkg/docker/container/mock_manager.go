// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_manager.go -package=container
//

// Package container is a generated GoMock package.
package container

import (
	context "context"
	reflect "reflect"

	types "github.com/trigg3rX/triggerx-backend/pkg/docker/types"
	gomock "go.uber.org/mock/gomock"
)

// MockpoolAPI is a mock of poolAPI interface.
type MockpoolAPI struct {
	ctrl     *gomock.Controller
	recorder *MockpoolAPIMockRecorder
	isgomock struct{}
}

// MockpoolAPIMockRecorder is the mock recorder for MockpoolAPI.
type MockpoolAPIMockRecorder struct {
	mock *MockpoolAPI
}

// NewMockpoolAPI creates a new mock instance.
func NewMockpoolAPI(ctrl *gomock.Controller) *MockpoolAPI {
	mock := &MockpoolAPI{ctrl: ctrl}
	mock.recorder = &MockpoolAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockpoolAPI) EXPECT() *MockpoolAPIMockRecorder {
	return m.recorder
}

// close mocks base method.
func (m *MockpoolAPI) close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "close")
	ret0, _ := ret[0].(error)
	return ret0
}

// close indicates an expected call of close.
func (mr *MockpoolAPIMockRecorder) close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "close", reflect.TypeOf((*MockpoolAPI)(nil).close))
}

// getContainer mocks base method.
func (m *MockpoolAPI) getContainer(ctx context.Context) (*types.PooledContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getContainer", ctx)
	ret0, _ := ret[0].(*types.PooledContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// getContainer indicates an expected call of getContainer.
func (mr *MockpoolAPIMockRecorder) getContainer(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getContainer", reflect.TypeOf((*MockpoolAPI)(nil).getContainer), ctx)
}

// getHealthCheckStats mocks base method.
func (m *MockpoolAPI) getHealthCheckStats() (int, int, int) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getHealthCheckStats")
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(int)
	return ret0, ret1, ret2
}

// getHealthCheckStats indicates an expected call of getHealthCheckStats.
func (mr *MockpoolAPIMockRecorder) getHealthCheckStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getHealthCheckStats", reflect.TypeOf((*MockpoolAPI)(nil).getHealthCheckStats))
}

// getStats mocks base method.
func (m *MockpoolAPI) getStats() *types.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "getStats")
	ret0, _ := ret[0].(*types.PoolStats)
	return ret0
}

// getStats indicates an expected call of getStats.
func (mr *MockpoolAPIMockRecorder) getStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "getStats", reflect.TypeOf((*MockpoolAPI)(nil).getStats))
}

// initialize mocks base method.
func (m *MockpoolAPI) initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// initialize indicates an expected call of initialize.
func (mr *MockpoolAPIMockRecorder) initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "initialize", reflect.TypeOf((*MockpoolAPI)(nil).initialize), ctx)
}

// returnContainer mocks base method.
func (m *MockpoolAPI) returnContainer(container *types.PooledContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "returnContainer", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// returnContainer indicates an expected call of returnContainer.
func (mr *MockpoolAPIMockRecorder) returnContainer(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "returnContainer", reflect.TypeOf((*MockpoolAPI)(nil).returnContainer), container)
}

// MockContainerManagerAPI is a mock of ContainerManagerAPI interface.
type MockContainerManagerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockContainerManagerAPIMockRecorder
	isgomock struct{}
}

// MockContainerManagerAPIMockRecorder is the mock recorder for MockContainerManagerAPI.
type MockContainerManagerAPIMockRecorder struct {
	mock *MockContainerManagerAPI
}

// NewMockContainerManagerAPI creates a new mock instance.
func NewMockContainerManagerAPI(ctrl *gomock.Controller) *MockContainerManagerAPI {
	mock := &MockContainerManagerAPI{ctrl: ctrl}
	mock.recorder = &MockContainerManagerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockContainerManagerAPI) EXPECT() *MockContainerManagerAPIMockRecorder {
	return m.recorder
}

// CleanupContainer mocks base method.
func (m *MockContainerManagerAPI) CleanupContainer(ctx context.Context, containerID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CleanupContainer", ctx, containerID)
	ret0, _ := ret[0].(error)
	return ret0
}

// KillExecProcess mocks base method.
func (m *MockContainerManagerAPI) KillExecProcess(ctx context.Context, execID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "KillExecProcess", ctx, execID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CleanupContainer indicates an expected call of CleanupContainer.
func (mr *MockContainerManagerAPIMockRecorder) CleanupContainer(ctx, containerID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CleanupContainer", reflect.TypeOf((*MockContainerManagerAPI)(nil).CleanupContainer), ctx, containerID)
}

// KillExecProcess indicates an expected call of KillExecProcess.
func (mr *MockContainerManagerAPIMockRecorder) KillExecProcess(ctx, execID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KillExecProcess", reflect.TypeOf((*MockContainerManagerAPI)(nil).KillExecProcess), ctx, execID)
}

// Close mocks base method.
func (m *MockContainerManagerAPI) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockContainerManagerAPIMockRecorder) Close(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockContainerManagerAPI)(nil).Close))
}

// ExecuteInContainer mocks base method.
func (m *MockContainerManagerAPI) ExecuteInContainer(ctx context.Context, containerID, filePath string, language types.Language) (*types.ExecutionResult, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExecuteInContainer", ctx, containerID, filePath, language)
	ret0, _ := ret[0].(*types.ExecutionResult)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ExecuteInContainer indicates an expected call of ExecuteInContainer.
func (mr *MockContainerManagerAPIMockRecorder) ExecuteInContainer(ctx, containerID, filePath, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExecuteInContainer", reflect.TypeOf((*MockContainerManagerAPI)(nil).ExecuteInContainer), ctx, containerID, filePath, language)
}

// GetContainer mocks base method.
func (m *MockContainerManagerAPI) GetContainer(ctx context.Context, language types.Language) (*types.PooledContainer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetContainer", ctx, language)
	ret0, _ := ret[0].(*types.PooledContainer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetContainer indicates an expected call of GetContainer.
func (mr *MockContainerManagerAPIMockRecorder) GetContainer(ctx, language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetContainer", reflect.TypeOf((*MockContainerManagerAPI)(nil).GetContainer), ctx, language)
}

// GetHealthCheckStats mocks base method.
func (m *MockContainerManagerAPI) GetHealthCheckStats() map[types.Language]map[string]int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthCheckStats")
	ret0, _ := ret[0].(map[types.Language]map[string]int)
	return ret0
}

// GetHealthCheckStats indicates an expected call of GetHealthCheckStats.
func (mr *MockContainerManagerAPIMockRecorder) GetHealthCheckStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthCheckStats", reflect.TypeOf((*MockContainerManagerAPI)(nil).GetHealthCheckStats))
}

// GetLanguageStats mocks base method.
func (m *MockContainerManagerAPI) GetLanguageStats(language types.Language) (*types.PoolStats, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguageStats", language)
	ret0, _ := ret[0].(*types.PoolStats)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetLanguageStats indicates an expected call of GetLanguageStats.
func (mr *MockContainerManagerAPIMockRecorder) GetLanguageStats(language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguageStats", reflect.TypeOf((*MockContainerManagerAPI)(nil).GetLanguageStats), language)
}

// GetPoolStats mocks base method.
func (m *MockContainerManagerAPI) GetPoolStats() map[types.Language]*types.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolStats")
	ret0, _ := ret[0].(map[types.Language]*types.PoolStats)
	return ret0
}

// GetPoolStats indicates an expected call of GetPoolStats.
func (mr *MockContainerManagerAPIMockRecorder) GetPoolStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolStats", reflect.TypeOf((*MockContainerManagerAPI)(nil).GetPoolStats))
}

// GetSupportedLanguages mocks base method.
func (m *MockContainerManagerAPI) GetSupportedLanguages() []types.Language {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedLanguages")
	ret0, _ := ret[0].([]types.Language)
	return ret0
}

// GetSupportedLanguages indicates an expected call of GetSupportedLanguages.
func (mr *MockContainerManagerAPIMockRecorder) GetSupportedLanguages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedLanguages", reflect.TypeOf((*MockContainerManagerAPI)(nil).GetSupportedLanguages))
}

// Initialize mocks base method.
func (m *MockContainerManagerAPI) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockContainerManagerAPIMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockContainerManagerAPI)(nil).Initialize), ctx)
}

// InitializeLanguagePools mocks base method.
func (m *MockContainerManagerAPI) InitializeLanguagePools(ctx context.Context, languages []types.Language) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitializeLanguagePools", ctx, languages)
	ret0, _ := ret[0].(error)
	return ret0
}

// InitializeLanguagePools indicates an expected call of InitializeLanguagePools.
func (mr *MockContainerManagerAPIMockRecorder) InitializeLanguagePools(ctx, languages any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitializeLanguagePools", reflect.TypeOf((*MockContainerManagerAPI)(nil).InitializeLanguagePools), ctx, languages)
}

// IsLanguageSupported mocks base method.
func (m *MockContainerManagerAPI) IsLanguageSupported(language types.Language) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLanguageSupported", language)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLanguageSupported indicates an expected call of IsLanguageSupported.
func (mr *MockContainerManagerAPIMockRecorder) IsLanguageSupported(language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLanguageSupported", reflect.TypeOf((*MockContainerManagerAPI)(nil).IsLanguageSupported), language)
}

// PullImage mocks base method.
func (m *MockContainerManagerAPI) PullImage(ctx context.Context, imageName string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PullImage", ctx, imageName)
	ret0, _ := ret[0].(error)
	return ret0
}

// PullImage indicates an expected call of PullImage.
func (mr *MockContainerManagerAPIMockRecorder) PullImage(ctx, imageName any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PullImage", reflect.TypeOf((*MockContainerManagerAPI)(nil).PullImage), ctx, imageName)
}

// ReturnContainer mocks base method.
func (m *MockContainerManagerAPI) ReturnContainer(container *types.PooledContainer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ReturnContainer", container)
	ret0, _ := ret[0].(error)
	return ret0
}

// ReturnContainer indicates an expected call of ReturnContainer.
func (mr *MockContainerManagerAPIMockRecorder) ReturnContainer(container any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReturnContainer", reflect.TypeOf((*MockContainerManagerAPI)(nil).ReturnContainer), container)
}
