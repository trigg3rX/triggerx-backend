// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_docker.go -package=docker . DockerManagerAPI
//

// Package docker is a generated GoMock package.
package docker

import (
	context "context"
	reflect "reflect"

	execution "github.com/trigg3rX/triggerx-backend/pkg/docker/execution"
	types "github.com/trigg3rX/triggerx-backend/pkg/docker/types"
	gomock "go.uber.org/mock/gomock"
)

// MockDockerManagerAPI is a mock of DockerManagerAPI interface.
type MockDockerManagerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDockerManagerAPIMockRecorder
	isgomock struct{}
}

// MockDockerManagerAPIMockRecorder is the mock recorder for MockDockerManagerAPI.
type MockDockerManagerAPIMockRecorder struct {
	mock *MockDockerManagerAPI
}

// NewMockDockerManagerAPI creates a new mock instance.
func NewMockDockerManagerAPI(ctrl *gomock.Controller) *MockDockerManagerAPI {
	mock := &MockDockerManagerAPI{ctrl: ctrl}
	mock.recorder = &MockDockerManagerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerManagerAPI) EXPECT() *MockDockerManagerAPIMockRecorder {
	return m.recorder
}

// CancelExecution mocks base method.
func (m *MockDockerManagerAPI) CancelExecution(executionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelExecution", executionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelExecution indicates an expected call of CancelExecution.
func (mr *MockDockerManagerAPIMockRecorder) CancelExecution(executionID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelExecution", reflect.TypeOf((*MockDockerManagerAPI)(nil).CancelExecution), executionID)
}

// ClearAlerts mocks base method.
func (m *MockDockerManagerAPI) ClearAlerts() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAlerts")
}

// ClearAlerts indicates an expected call of ClearAlerts.
func (mr *MockDockerManagerAPIMockRecorder) ClearAlerts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAlerts", reflect.TypeOf((*MockDockerManagerAPI)(nil).ClearAlerts))
}

// Close mocks base method.
func (m *MockDockerManagerAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDockerManagerAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDockerManagerAPI)(nil).Close))
}

// Execute mocks base method.
func (m *MockDockerManagerAPI) Execute(ctx context.Context, fileURL, fileLanguage string, noOfAttesters int) (*types.ExecutionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, fileURL, fileLanguage, noOfAttesters)
	ret0, _ := ret[0].(*types.ExecutionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockDockerManagerAPIMockRecorder) Execute(ctx, fileURL, fileLanguage, noOfAttesters any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDockerManagerAPI)(nil).Execute), ctx, fileURL, fileLanguage, noOfAttesters)
}

// GetActiveExecutions mocks base method.
func (m *MockDockerManagerAPI) GetActiveExecutions() []*types.ExecutionContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveExecutions")
	ret0, _ := ret[0].([]*types.ExecutionContext)
	return ret0
}

// GetActiveExecutions indicates an expected call of GetActiveExecutions.
func (mr *MockDockerManagerAPIMockRecorder) GetActiveExecutions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveExecutions", reflect.TypeOf((*MockDockerManagerAPI)(nil).GetActiveExecutions))
}

// GetAlerts mocks base method.
func (m *MockDockerManagerAPI) GetAlerts(severity string, limit int) []execution.Alert {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlerts", severity, limit)
	ret0, _ := ret[0].([]execution.Alert)
	return ret0
}

// GetAlerts indicates an expected call of GetAlerts.
func (mr *MockDockerManagerAPIMockRecorder) GetAlerts(severity, limit any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlerts", reflect.TypeOf((*MockDockerManagerAPI)(nil).GetAlerts), severity, limit)
}

// GetAllPoolStats mocks base method.
func (m *MockDockerManagerAPI) GetAllPoolStats() map[types.Language]*types.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPoolStats")
	ret0, _ := ret[0].(map[types.Language]*types.PoolStats)
	return ret0
}

// GetAllPoolStats indicates an expected call of GetAllPoolStats.
func (mr *MockDockerManagerAPIMockRecorder) GetAllPoolStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPoolStats", reflect.TypeOf((*MockDockerManagerAPI)(nil).GetAllPoolStats))
}

// GetHealthStatus mocks base method.
func (m *MockDockerManagerAPI) GetHealthStatus() *execution.HealthStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthStatus")
	ret0, _ := ret[0].(*execution.HealthStatus)
	return ret0
}

// GetHealthStatus indicates an expected call of GetHealthStatus.
func (mr *MockDockerManagerAPIMockRecorder) GetHealthStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthStatus", reflect.TypeOf((*MockDockerManagerAPI)(nil).GetHealthStatus))
}

// GetLanguageStats mocks base method.
func (m *MockDockerManagerAPI) GetLanguageStats(language types.Language) (*types.PoolStats, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguageStats", language)
	ret0, _ := ret[0].(*types.PoolStats)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetLanguageStats indicates an expected call of GetLanguageStats.
func (mr *MockDockerManagerAPIMockRecorder) GetLanguageStats(language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguageStats", reflect.TypeOf((*MockDockerManagerAPI)(nil).GetLanguageStats), language)
}

// GetPoolStats mocks base method.
func (m *MockDockerManagerAPI) GetPoolStats(language types.Language) *types.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolStats", language)
	ret0, _ := ret[0].(*types.PoolStats)
	return ret0
}

// GetPoolStats indicates an expected call of GetPoolStats.
func (mr *MockDockerManagerAPIMockRecorder) GetPoolStats(language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolStats", reflect.TypeOf((*MockDockerManagerAPI)(nil).GetPoolStats), language)
}

// GetStats mocks base method.
func (m *MockDockerManagerAPI) GetStats() *types.PerformanceMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(*types.PerformanceMetrics)
	return ret0
}

// GetStats indicates an expected call of GetStats.
func (mr *MockDockerManagerAPIMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockDockerManagerAPI)(nil).GetStats))
}

// GetSupportedLanguages mocks base method.
func (m *MockDockerManagerAPI) GetSupportedLanguages() []types.Language {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedLanguages")
	ret0, _ := ret[0].([]types.Language)
	return ret0
}

// GetSupportedLanguages indicates an expected call of GetSupportedLanguages.
func (mr *MockDockerManagerAPIMockRecorder) GetSupportedLanguages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedLanguages", reflect.TypeOf((*MockDockerManagerAPI)(nil).GetSupportedLanguages))
}

// Initialize mocks base method.
func (m *MockDockerManagerAPI) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockDockerManagerAPIMockRecorder) Initialize(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockDockerManagerAPI)(nil).Initialize), ctx)
}

// IsLanguageSupported mocks base method.
func (m *MockDockerManagerAPI) IsLanguageSupported(language types.Language) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLanguageSupported", language)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLanguageSupported indicates an expected call of IsLanguageSupported.
func (mr *MockDockerManagerAPIMockRecorder) IsLanguageSupported(language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLanguageSupported", reflect.TypeOf((*MockDockerManagerAPI)(nil).IsLanguageSupported), language)
}
