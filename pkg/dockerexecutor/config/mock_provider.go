// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/trigg3rX/triggerx-backend/pkg/dockerexecutor/config (interfaces: ConfigProviderInterface)
//
// Generated by this command:
//
//	mockgen -destination=mock_provider.go -package=config . ConfigProviderInterface
//

// Package config is a generated GoMock package.
package config

import (
	reflect "reflect"

	types "github.com/trigg3rX/triggerx-backend/pkg/dockerexecutor/types"
	gomock "go.uber.org/mock/gomock"
)

// MockConfigProviderInterface is a mock of ConfigProviderInterface interface.
type MockConfigProviderInterface struct {
	ctrl     *gomock.Controller
	recorder *MockConfigProviderInterfaceMockRecorder
	isgomock struct{}
}

// MockConfigProviderInterfaceMockRecorder is the mock recorder for MockConfigProviderInterface.
type MockConfigProviderInterfaceMockRecorder struct {
	mock *MockConfigProviderInterface
}

// NewMockConfigProviderInterface creates a new mock instance.
func NewMockConfigProviderInterface(ctrl *gomock.Controller) *MockConfigProviderInterface {
	mock := &MockConfigProviderInterface{ctrl: ctrl}
	mock.recorder = &MockConfigProviderInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigProviderInterface) EXPECT() *MockConfigProviderInterfaceMockRecorder {
	return m.recorder
}

// GetCacheConfig mocks base method.
func (m *MockConfigProviderInterface) GetCacheConfig() FileCacheConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheConfig")
	ret0, _ := ret[0].(FileCacheConfig)
	return ret0
}

// GetCacheConfig indicates an expected call of GetCacheConfig.
func (mr *MockConfigProviderInterfaceMockRecorder) GetCacheConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheConfig", reflect.TypeOf((*MockConfigProviderInterface)(nil).GetCacheConfig))
}

// GetConfig mocks base method.
func (m *MockConfigProviderInterface) GetConfig() CodeExecutorConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetConfig")
	ret0, _ := ret[0].(CodeExecutorConfig)
	return ret0
}

// GetConfig indicates an expected call of GetConfig.
func (mr *MockConfigProviderInterfaceMockRecorder) GetConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetConfig", reflect.TypeOf((*MockConfigProviderInterface)(nil).GetConfig))
}

// GetDockerConfig mocks base method.
func (m *MockConfigProviderInterface) GetDockerConfig() DockerContainerConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDockerConfig")
	ret0, _ := ret[0].(DockerContainerConfig)
	return ret0
}

// GetDockerConfig indicates an expected call of GetDockerConfig.
func (mr *MockConfigProviderInterfaceMockRecorder) GetDockerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDockerConfig", reflect.TypeOf((*MockConfigProviderInterface)(nil).GetDockerConfig))
}

// GetFeesConfig mocks base method.
func (m *MockConfigProviderInterface) GetFeesConfig() ExecutionFeeConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeesConfig")
	ret0, _ := ret[0].(ExecutionFeeConfig)
	return ret0
}

// GetFeesConfig indicates an expected call of GetFeesConfig.
func (mr *MockConfigProviderInterfaceMockRecorder) GetFeesConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeesConfig", reflect.TypeOf((*MockConfigProviderInterface)(nil).GetFeesConfig))
}

// GetLanguagePoolConfig mocks base method.
func (m *MockConfigProviderInterface) GetLanguagePoolConfig(language types.Language) (LanguagePoolConfig, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguagePoolConfig", language)
	ret0, _ := ret[0].(LanguagePoolConfig)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetLanguagePoolConfig indicates an expected call of GetLanguagePoolConfig.
func (mr *MockConfigProviderInterfaceMockRecorder) GetLanguagePoolConfig(language any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguagePoolConfig", reflect.TypeOf((*MockConfigProviderInterface)(nil).GetLanguagePoolConfig), language)
}

// GetMonitoringConfig mocks base method.
func (m *MockConfigProviderInterface) GetMonitoringConfig() MonitoringConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMonitoringConfig")
	ret0, _ := ret[0].(MonitoringConfig)
	return ret0
}

// GetManagerConfig mocks base method.
func (m *MockConfigProviderInterface) GetManagerConfig() ManagerConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetManagerConfig")
	ret0, _ := ret[0].(ManagerConfig)
	return ret0
}

// GetManagerConfig indicates an expected call of GetManagerConfig.
func (mr *MockConfigProviderInterfaceMockRecorder) GetManagerConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetManagerConfig", reflect.TypeOf((*MockConfigProviderInterface)(nil).GetManagerConfig))
}

// GetMonitoringConfig indicates an expected call of GetMonitoringConfig.
func (mr *MockConfigProviderInterfaceMockRecorder) GetMonitoringConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMonitoringConfig", reflect.TypeOf((*MockConfigProviderInterface)(nil).GetMonitoringConfig))
}

// GetSupportedLanguages mocks base method.
func (m *MockConfigProviderInterface) GetSupportedLanguages() []types.Language {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedLanguages")
	ret0, _ := ret[0].([]types.Language)
	return ret0
}

// GetSupportedLanguages indicates an expected call of GetSupportedLanguages.
func (mr *MockConfigProviderInterfaceMockRecorder) GetSupportedLanguages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedLanguages", reflect.TypeOf((*MockConfigProviderInterface)(nil).GetSupportedLanguages))
}

// GetValidationConfig mocks base method.
func (m *MockConfigProviderInterface) GetValidationConfig() ValidationConfig {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetValidationConfig")
	ret0, _ := ret[0].(ValidationConfig)
	return ret0
}

// GetValidationConfig indicates an expected call of GetValidationConfig.
func (mr *MockConfigProviderInterfaceMockRecorder) GetValidationConfig() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetValidationConfig", reflect.TypeOf((*MockConfigProviderInterface)(nil).GetValidationConfig))
}
