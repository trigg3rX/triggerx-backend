// Code generated by MockGen. DO NOT EDIT.
// Source: interface.go
//
// Generated by this command:
//
//	mockgen -source=interface.go -destination=mock_file_manager.go -package=file
//

// Package file is a generated GoMock package.
package file

import (
	context "context"
	reflect "reflect"

	types "github.com/trigg3rX/triggerx-backend/pkg/dockerexecutor/types"
	gomock "go.uber.org/mock/gomock"
)

// MockFileManagerAPI is a mock of FileManagerAPI interface.
type MockFileManagerAPI struct {
	ctrl     *gomock.Controller
	recorder *MockFileManagerAPIMockRecorder
	isgomock struct{}
}

// MockFileManagerAPIMockRecorder is the mock recorder for MockFileManagerAPI.
type MockFileManagerAPIMockRecorder struct {
	mock *MockFileManagerAPI
}

// NewMockFileManagerAPI creates a new mock instance.
func NewMockFileManagerAPI(ctrl *gomock.Controller) *MockFileManagerAPI {
	mock := &MockFileManagerAPI{ctrl: ctrl}
	mock.recorder = &MockFileManagerAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFileManagerAPI) EXPECT() *MockFileManagerAPIMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockFileManagerAPI) Close() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close")
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockFileManagerAPIMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockFileManagerAPI)(nil).Close))
}

// GetCacheStats mocks base method.
func (m *MockFileManagerAPI) GetCacheStats() *types.CacheStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCacheStats")
	ret0, _ := ret[0].(*types.CacheStats)
	return ret0
}

// GetCacheStats indicates an expected call of GetCacheStats.
func (mr *MockFileManagerAPIMockRecorder) GetCacheStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCacheStats", reflect.TypeOf((*MockFileManagerAPI)(nil).GetCacheStats))
}

// GetOrDownload mocks base method.
func (m *MockFileManagerAPI) GetOrDownload(ctx context.Context, fileURL, fileLanguage string) (*types.ExecutionContext, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrDownload", ctx, fileURL, fileLanguage)
	ret0, _ := ret[0].(*types.ExecutionContext)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrDownload indicates an expected call of GetOrDownload.
func (mr *MockFileManagerAPIMockRecorder) GetOrDownload(ctx, fileURL, fileLanguage any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrDownload", reflect.TypeOf((*MockFileManagerAPI)(nil).GetOrDownload), ctx, fileURL, fileLanguage)
}

// GetPerformanceStats mocks base method.
func (m *MockFileManagerAPI) GetPerformanceStats() *types.PerformanceMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPerformanceStats")
	ret0, _ := ret[0].(*types.PerformanceMetrics)
	return ret0
}

// GetPerformanceStats indicates an expected call of GetPerformanceStats.
func (mr *MockFileManagerAPIMockRecorder) GetPerformanceStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPerformanceStats", reflect.TypeOf((*MockFileManagerAPI)(nil).GetPerformanceStats))
}
