// Code generated by MockGen. DO NOT EDIT.
// Source: ./pkg/dockerexecutor/interface.go

// Package mock_dockerexecutor is a generated GoMock package.
package dockerexecutor

import (
	context "context"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
	execution "github.com/trigg3rX/triggerx-backend/pkg/dockerexecutor/execution"
	types "github.com/trigg3rX/triggerx-backend/pkg/dockerexecutor/types"
)

// MockDockerExecutorAPI is a mock of DockerExecutorAPI interface.
type MockDockerExecutorAPI struct {
	ctrl     *gomock.Controller
	recorder *MockDockerExecutorAPIMockRecorder
}

// MockDockerExecutorAPIMockRecorder is the mock recorder for MockDockerExecutorAPI.
type MockDockerExecutorAPIMockRecorder struct {
	mock *MockDockerExecutorAPI
}

// NewMockDockerExecutorAPI creates a new mock instance.
func NewMockDockerExecutorAPI(ctrl *gomock.Controller) *MockDockerExecutorAPI {
	mock := &MockDockerExecutorAPI{ctrl: ctrl}
	mock.recorder = &MockDockerExecutorAPIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDockerExecutorAPI) EXPECT() *MockDockerExecutorAPIMockRecorder {
	return m.recorder
}

// CancelExecution mocks base method.
func (m *MockDockerExecutorAPI) CancelExecution(executionID string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelExecution", executionID)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelExecution indicates an expected call of CancelExecution.
func (mr *MockDockerExecutorAPIMockRecorder) CancelExecution(executionID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelExecution", reflect.TypeOf((*MockDockerExecutorAPI)(nil).CancelExecution), executionID)
}

// ClearAlerts mocks base method.
func (m *MockDockerExecutorAPI) ClearAlerts() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ClearAlerts")
}

// ClearAlerts indicates an expected call of ClearAlerts.
func (mr *MockDockerExecutorAPIMockRecorder) ClearAlerts() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ClearAlerts", reflect.TypeOf((*MockDockerExecutorAPI)(nil).ClearAlerts))
}

// Close mocks base method.
func (m *MockDockerExecutorAPI) Close(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Close", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Close indicates an expected call of Close.
func (mr *MockDockerExecutorAPIMockRecorder) Close(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockDockerExecutorAPI)(nil).Close), ctx)
}

// Execute mocks base method.
func (m *MockDockerExecutorAPI) Execute(ctx context.Context, fileURL, fileLanguage string, noOfAttesters int) (*types.ExecutionResult, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Execute", ctx, fileURL, fileLanguage, noOfAttesters)
	ret0, _ := ret[0].(*types.ExecutionResult)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Execute indicates an expected call of Execute.
func (mr *MockDockerExecutorAPIMockRecorder) Execute(ctx, fileURL, fileLanguage, noOfAttesters interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Execute", reflect.TypeOf((*MockDockerExecutorAPI)(nil).Execute), ctx, fileURL, fileLanguage, noOfAttesters)
}

// GetActiveExecutions mocks base method.
func (m *MockDockerExecutorAPI) GetActiveExecutions() []*types.ExecutionContext {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActiveExecutions")
	ret0, _ := ret[0].([]*types.ExecutionContext)
	return ret0
}

// GetActiveExecutions indicates an expected call of GetActiveExecutions.
func (mr *MockDockerExecutorAPIMockRecorder) GetActiveExecutions() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActiveExecutions", reflect.TypeOf((*MockDockerExecutorAPI)(nil).GetActiveExecutions))
}

// GetAlerts mocks base method.
func (m *MockDockerExecutorAPI) GetAlerts(severity string, limit int) []execution.Alert {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAlerts", severity, limit)
	ret0, _ := ret[0].([]execution.Alert)
	return ret0
}

// GetAlerts indicates an expected call of GetAlerts.
func (mr *MockDockerExecutorAPIMockRecorder) GetAlerts(severity, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAlerts", reflect.TypeOf((*MockDockerExecutorAPI)(nil).GetAlerts), severity, limit)
}

// GetAllPoolStats mocks base method.
func (m *MockDockerExecutorAPI) GetAllPoolStats() map[types.Language]*types.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllPoolStats")
	ret0, _ := ret[0].(map[types.Language]*types.PoolStats)
	return ret0
}

// GetAllPoolStats indicates an expected call of GetAllPoolStats.
func (mr *MockDockerExecutorAPIMockRecorder) GetAllPoolStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllPoolStats", reflect.TypeOf((*MockDockerExecutorAPI)(nil).GetAllPoolStats))
}

// GetHealthStatus mocks base method.
func (m *MockDockerExecutorAPI) GetHealthStatus() *execution.HealthStatus {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHealthStatus")
	ret0, _ := ret[0].(*execution.HealthStatus)
	return ret0
}

// GetHealthStatus indicates an expected call of GetHealthStatus.
func (mr *MockDockerExecutorAPIMockRecorder) GetHealthStatus() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHealthStatus", reflect.TypeOf((*MockDockerExecutorAPI)(nil).GetHealthStatus))
}

// GetLanguageStats mocks base method.
func (m *MockDockerExecutorAPI) GetLanguageStats(language types.Language) (*types.PoolStats, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLanguageStats", language)
	ret0, _ := ret[0].(*types.PoolStats)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// GetLanguageStats indicates an expected call of GetLanguageStats.
func (mr *MockDockerExecutorAPIMockRecorder) GetLanguageStats(language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLanguageStats", reflect.TypeOf((*MockDockerExecutorAPI)(nil).GetLanguageStats), language)
}

// GetPoolStats mocks base method.
func (m *MockDockerExecutorAPI) GetPoolStats(language types.Language) *types.PoolStats {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetPoolStats", language)
	ret0, _ := ret[0].(*types.PoolStats)
	return ret0
}

// GetPoolStats indicates an expected call of GetPoolStats.
func (mr *MockDockerExecutorAPIMockRecorder) GetPoolStats(language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPoolStats", reflect.TypeOf((*MockDockerExecutorAPI)(nil).GetPoolStats), language)
}

// GetStats mocks base method.
func (m *MockDockerExecutorAPI) GetStats() *types.PerformanceMetrics {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStats")
	ret0, _ := ret[0].(*types.PerformanceMetrics)
	return ret0
}

// GetStats indicates an expected call of GetStats.
func (mr *MockDockerExecutorAPIMockRecorder) GetStats() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStats", reflect.TypeOf((*MockDockerExecutorAPI)(nil).GetStats))
}

// GetSupportedLanguages mocks base method.
func (m *MockDockerExecutorAPI) GetSupportedLanguages() []types.Language {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSupportedLanguages")
	ret0, _ := ret[0].([]types.Language)
	return ret0
}

// GetSupportedLanguages indicates an expected call of GetSupportedLanguages.
func (mr *MockDockerExecutorAPIMockRecorder) GetSupportedLanguages() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSupportedLanguages", reflect.TypeOf((*MockDockerExecutorAPI)(nil).GetSupportedLanguages))
}

// Initialize mocks base method.
func (m *MockDockerExecutorAPI) Initialize(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Initialize", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// Initialize indicates an expected call of Initialize.
func (mr *MockDockerExecutorAPIMockRecorder) Initialize(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Initialize", reflect.TypeOf((*MockDockerExecutorAPI)(nil).Initialize), ctx)
}

// IsLanguageSupported mocks base method.
func (m *MockDockerExecutorAPI) IsLanguageSupported(language types.Language) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsLanguageSupported", language)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsLanguageSupported indicates an expected call of IsLanguageSupported.
func (mr *MockDockerExecutorAPIMockRecorder) IsLanguageSupported(language interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsLanguageSupported", reflect.TypeOf((*MockDockerExecutorAPI)(nil).IsLanguageSupported), language)
}
